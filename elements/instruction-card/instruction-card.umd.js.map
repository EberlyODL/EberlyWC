{"version":3,"file":"instruction-card.umd.js","sources":["instruction-card.umd.js"],"sourcesContent":["/**\n * Copyright 2021 \n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from 'lit-element/lit-element.js';\n\n/**\n * `instruction-card`\n * `An element for displaying learning materials.`\n * @demo demo/index.html\n * @element instruction-card\n */\nclass InstructionCard extends LitElement {\n  \n  //styles function\n  static get styles() {\n    return  [\n      \n      css`\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n      `\n    ];\n  }\n\n// Template return function\n  render() {\n    return html`\n\n<slot></slot>\n<div>${this.type}</div>`;\n  }\n\n  // haxProperty definition\n  static get haxProperties() {\n    return {\n  \"canScale\": true,\n  \"canPosition\": true,\n  \"canEditSource\": false,\n  \"gizmo\": {\n    \"title\": \"Instruction card\",\n    \"description\": \"An element for displaying learning materials.\",\n    \"icon\": \"icons:android\",\n    \"color\": \"green\",\n    \"groups\": [\n      \"Card\"\n    ],\n    \"handles\": [\n      {\n        \"type\": \"todo:read-the-docs-for-usage\"\n      }\n    ],\n    \"meta\": {\n      \"author\": \"cgldevel\",\n      \"owner\": \"\"\n    }\n  },\n  \"settings\": {\n    \"configure\": [\n      {\n        \"property\": \"type\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\",\n        \"required\": false,\n        \"icon\": \"icons:android\"\n      }\n    ],\n    \"advanced\": []\n  }\n};\n  }\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  \n  ...super.properties,\n  \n  \"type\": {\n    \"name\": \"type\",\n    \"type\": String,\n    \"value\": \"\",\n    \"reflectToAttribute\": true,\n    \"observer\": false\n  }\n};\n  }\n\n  /**\n   * Convention we use\n   */\n  static get tag() {\n    return \"instruction-card\";\n  }\n\n  /**\n   * HTMLElement\n   */\n  constructor() {\n    super();\n    \n  }\n  /**\n   * LitElement ready\n   */\n  firstUpdated(changedProperties) {\n    \n  }\n  /**\n   * LitElement life cycle - property changed\n   */\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      /* notify example\n      // notify\n      if (propName == 'format') {\n        this.dispatchEvent(\n          new CustomEvent(`${propName}-changed`, {\n            detail: {\n              value: this[propName],\n            }\n          })\n        );\n      }\n      */\n      /* observer example\n      if (propName == 'activeNode') {\n        this._activeNodeChanged(this[propName], oldValue);\n      }\n      */\n      /* computed example\n      if (['id', 'selected'].includes(propName)) {\n        this.__selectedChanged(this.selected, this.id);\n      }\n      */\n    });\n  }\n  \n}\ncustomElements.define(InstructionCard.tag, InstructionCard);\nexport { InstructionCard };\n"],"names":["InstructionCard","css","String","html","this","type","changedProperties","forEach","oldValue","propName","LitElement","customElements","define","tag"],"mappings":"s2EAYMA,+bAIM,CAENC,mIAqBJ,iBACS,WACG,eACG,iBACE,QACR,OACE,+BACM,qDACP,sBACC,eACC,CACR,gBAES,CACT,MACU,sCAGJ,QACI,iBACD,cAGD,WACG,CACX,UACc,mBACG,eACA,sBACH,OACJ,2BAGA,6BAKd,6DAKQ,MACE,YACAC,aACC,uBACa,YACV,sBAQd,iBACS,gEAhEAC,uDAGJC,KAAKC,kCA0EV,SAAaC,2BAMb,SAAQA,GACNA,EAAkBC,SAAQ,SAACC,EAAUC,0CAxGXC,cAmI9BC,eAAeC,OAAOZ,EAAgBa,IAAKb"}